
// RootCAsMem is a helper option to provide the RootCAs pool from memory.
// If Secure is not already set this will set it as well.
func RootCAsMem(rootCAs []byte) Option {

	return func(o *Options) error {
		rootCAsCB := func() (*x509.CertPool, error) {
			pool := x509.NewCertPool()
			ok := pool.AppendCertsFromPEM(rootCAs)
			if !ok {
				return nil, fmt.Errorf("nats: failed to parse root certificate from memory")
			}
			return pool, nil
		}
		if o.TLSConfig == nil {
			o.TLSConfig = &tls.Config{MinVersion: tls.VersionTLS12}
		}
		if _, err := rootCAsCB(); err != nil {
			return err
		}
		o.RootCAsCB = rootCAsCB
		o.Secure = true
		return nil
	}
}

// ClientCertMem is a helper option to provide the client certificate from memory.
// If Secure is not already set this will set it as well.
func ClientCertMem(cert []byte, key []byte) Option {
	return func(o *Options) error {
		tlsCertCB := func() (tls.Certificate, error) {
			cert, err := tls.X509KeyPair(cert, key)
			if err != nil {
				return tls.Certificate{}, fmt.Errorf("nats: error loading client certificate from MEM: %w", err)
			}
			cert.Leaf, err = x509.ParseCertificate(cert.Certificate[0])
			if err != nil {
				return tls.Certificate{}, fmt.Errorf("nats: error parsing client certificate from MEM: %w", err)
			}
			return cert, nil
		}
		if o.TLSConfig == nil {
			o.TLSConfig = &tls.Config{MinVersion: tls.VersionTLS12}
		}
		if _, err := tlsCertCB(); err != nil {
			return err
		}
		o.TLSCertCB = tlsCertCB
		o.Secure = true
		return nil
	}
}

conn_test.go
func TestClientCertificateMem(t *testing.T) {
	s, opts := RunServerWithConfig("./configs/tlsverify.conf")
	defer s.Shutdown()

	endpoint := fmt.Sprintf("%s:%d", opts.Host, opts.Port)
	secureURL := fmt.Sprintf("nats://%s", endpoint)

	// load certs into memory
	clientCert, err := os.ReadFile("./configs/certs/client-cert.pem")
	if err != nil {
		t.Fatalf("Failed to read clientCert: %v", err)
	}
	clientKey, err := os.ReadFile("./configs/certs/client-key.pem")
	if err != nil {
		t.Fatalf("Failed to read clientKey: %v", err)
	}
	ca, err := os.ReadFile("./configs/certs/ca.pem")
	if err != nil {
		t.Fatalf("Failed to read ca: %v", err)
	}

	nc, err := nats.Connect(secureURL,
		nats.RootCAsMem(ca),
		nats.ClientCertMem(clientCert, clientKey))
	if err != nil {
		t.Fatalf("Failed to create (TLS) connection from Memory: %v", err)
	}
	defer nc.Close()

	omsg := []byte("Hello!")
	checkRecv := make(chan bool)

	received := 0
	nc.Subscribe("foo", func(m *nats.Msg) {
		received++
		if !bytes.Equal(m.Data, omsg) {
			t.Fatal("Message received does not match")
		}
		checkRecv <- true
	})
	err = nc.Publish("foo", omsg)
	if err != nil {
		t.Fatalf("Failed to publish on secure (TLS) connection: %v", err)
	}
	nc.Flush()

	if err := Wait(checkRecv); err != nil {
		t.Fatal("Failed to receive message")
	}
}
